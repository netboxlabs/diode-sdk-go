// Code generated by github.com/diode-sdk-go/internal/cmd/codegen. DO NOT EDIT.

package diode

import (
	"google.golang.org/protobuf/proto"

	"github.com/netboxlabs/diode-sdk-go/diode/v1/diodepb"
)

// Entity is an interface that all entities must implement
type Entity interface {
	ConvertToProtoMessage() proto.Message
	ConvertToProtoEntity() *diodepb.Entity
}

// Device is based on diodepb.Device
type Device struct {
	Name        *string
	DeviceFqdn  *string
	DeviceType  *DeviceType
	Role        *Role
	Platform    *Platform
	Serial      *string
	Site        *Site
	AssetTag    *string
	Status      *string
	Description *string
	Comments    *string
	Tags        []*Tag
	PrimaryIp4  *IPAddress
	PrimaryIp6  *IPAddress
}

// ConvertToProtoMessageDevice converts a Device to a diodepb.Device
func (d *Device) ConvertToProtoMessage() proto.Message {
	return &diodepb.Device{
		Name:        d.GetName(),
		DeviceFqdn:  d.GetDeviceFqdn(),
		DeviceType:  d.GetDeviceType(),
		Role:        d.GetRole(),
		Platform:    d.GetPlatform(),
		Serial:      d.GetSerial(),
		Site:        d.GetSite(),
		AssetTag:    d.GetAssetTag(),
		Status:      d.GetStatus(),
		Description: d.GetDescription(),
		Comments:    d.GetComments(),
		Tags:        d.GetTags(),
		PrimaryIp4:  d.GetPrimaryIp4(),
		PrimaryIp6:  d.GetPrimaryIp6(),
	}
}

// GetName returns the Name field
func (d *Device) GetName() string {
	if d != nil && d.Name != nil {
		return *d.Name
	}
	return ""
}

// GetDeviceFqdn returns the DeviceFqdn field
func (d *Device) GetDeviceFqdn() *string {
	if d != nil && d.DeviceFqdn != nil {
		return d.DeviceFqdn
	}
	return nil
}

// GetDeviceType returns the DeviceType field
func (d *Device) GetDeviceType() *diodepb.DeviceType {
	if d != nil && d.DeviceType != nil {
		return d.DeviceType.ConvertToProtoMessage().(*diodepb.DeviceType)
	}
	return nil
}

// GetRole returns the Role field
func (d *Device) GetRole() *diodepb.Role {
	if d != nil && d.Role != nil {
		return d.Role.ConvertToProtoMessage().(*diodepb.Role)
	}
	return nil
}

// GetPlatform returns the Platform field
func (d *Device) GetPlatform() *diodepb.Platform {
	if d != nil && d.Platform != nil {
		return d.Platform.ConvertToProtoMessage().(*diodepb.Platform)
	}
	return nil
}

// GetSerial returns the Serial field
func (d *Device) GetSerial() *string {
	if d != nil && d.Serial != nil {
		return d.Serial
	}
	return nil
}

// GetSite returns the Site field
func (d *Device) GetSite() *diodepb.Site {
	if d != nil && d.Site != nil {
		return d.Site.ConvertToProtoMessage().(*diodepb.Site)
	}
	return nil
}

// GetAssetTag returns the AssetTag field
func (d *Device) GetAssetTag() *string {
	if d != nil && d.AssetTag != nil {
		return d.AssetTag
	}
	return nil
}

// GetStatus returns the Status field
func (d *Device) GetStatus() string {
	if d != nil && d.Status != nil {
		return *d.Status
	}
	return ""
}

// GetDescription returns the Description field
func (d *Device) GetDescription() *string {
	if d != nil && d.Description != nil {
		return d.Description
	}
	return nil
}

// GetComments returns the Comments field
func (d *Device) GetComments() *string {
	if d != nil && d.Comments != nil {
		return d.Comments
	}
	return nil
}

// GetTags returns the Tags field
func (d *Device) GetTags() []*diodepb.Tag {
	var tags []*diodepb.Tag
	for _, el := range d.Tags {
		tags = append(tags, el.ConvertToProtoMessage().(*diodepb.Tag))
	}
	return tags
}

// GetPrimaryIp4 returns the PrimaryIp4 field
func (d *Device) GetPrimaryIp4() *diodepb.IPAddress {
	if d != nil && d.PrimaryIp4 != nil {
		return d.PrimaryIp4.ConvertToProtoMessage().(*diodepb.IPAddress)
	}
	return nil
}

// GetPrimaryIp6 returns the PrimaryIp6 field
func (d *Device) GetPrimaryIp6() *diodepb.IPAddress {
	if d != nil && d.PrimaryIp6 != nil {
		return d.PrimaryIp6.ConvertToProtoMessage().(*diodepb.IPAddress)
	}
	return nil
}

// ConvertToProtoEntityDevice converts a Device to a diodepb.Entity
func (d *Device) ConvertToProtoEntity() *diodepb.Entity {
	return &diodepb.Entity{
		Entity: &diodepb.Entity_Device{
			Device: d.ConvertToProtoMessage().(*diodepb.Device),
		},
	}
}

// DeviceType is based on diodepb.DeviceType
type DeviceType struct {
	Model        *string
	Slug         *string
	Manufacturer *Manufacturer
	Description  *string
	Comments     *string
	PartNumber   *string
	Tags         []*Tag
}

// ConvertToProtoMessageDeviceType converts a DeviceType to a diodepb.DeviceType
func (d *DeviceType) ConvertToProtoMessage() proto.Message {
	return &diodepb.DeviceType{
		Model:        d.GetModel(),
		Slug:         d.GetSlug(),
		Manufacturer: d.GetManufacturer(),
		Description:  d.GetDescription(),
		Comments:     d.GetComments(),
		PartNumber:   d.GetPartNumber(),
		Tags:         d.GetTags(),
	}
}

// GetModel returns the Model field
func (d *DeviceType) GetModel() string {
	if d != nil && d.Model != nil {
		return *d.Model
	}
	return ""
}

// GetSlug returns the Slug field
func (d *DeviceType) GetSlug() string {
	if d != nil && d.Slug != nil {
		return *d.Slug
	}
	return ""
}

// GetManufacturer returns the Manufacturer field
func (d *DeviceType) GetManufacturer() *diodepb.Manufacturer {
	if d != nil && d.Manufacturer != nil {
		return d.Manufacturer.ConvertToProtoMessage().(*diodepb.Manufacturer)
	}
	return nil
}

// GetDescription returns the Description field
func (d *DeviceType) GetDescription() *string {
	if d != nil && d.Description != nil {
		return d.Description
	}
	return nil
}

// GetComments returns the Comments field
func (d *DeviceType) GetComments() *string {
	if d != nil && d.Comments != nil {
		return d.Comments
	}
	return nil
}

// GetPartNumber returns the PartNumber field
func (d *DeviceType) GetPartNumber() *string {
	if d != nil && d.PartNumber != nil {
		return d.PartNumber
	}
	return nil
}

// GetTags returns the Tags field
func (d *DeviceType) GetTags() []*diodepb.Tag {
	var tags []*diodepb.Tag
	for _, el := range d.Tags {
		tags = append(tags, el.ConvertToProtoMessage().(*diodepb.Tag))
	}
	return tags
}

// ConvertToProtoEntityDeviceType converts a DeviceType to a diodepb.Entity
func (d *DeviceType) ConvertToProtoEntity() *diodepb.Entity {
	return &diodepb.Entity{
		Entity: &diodepb.Entity_DeviceType{
			DeviceType: d.ConvertToProtoMessage().(*diodepb.DeviceType),
		},
	}
}

// IPAddress is based on diodepb.IPAddress
type IPAddress struct {
	Address        *string
	AssignedObject *Interface
	Status         *string
	Role           *string
	DnsName        *string
	Description    *string
	Comments       *string
	Tags           []*Tag
}

// ConvertToProtoMessageIPAddress converts a IPAddress to a diodepb.IPAddress
func (d *IPAddress) ConvertToProtoMessage() proto.Message {
	return &diodepb.IPAddress{
		Address:        d.GetAddress(),
		AssignedObject: d.GetAssignedObject(),
		Status:         d.GetStatus(),
		Role:           d.GetRole(),
		DnsName:        d.GetDnsName(),
		Description:    d.GetDescription(),
		Comments:       d.GetComments(),
		Tags:           d.GetTags(),
	}
}

// GetAddress returns the Address field
func (d *IPAddress) GetAddress() string {
	if d != nil && d.Address != nil {
		return *d.Address
	}
	return ""
}

// GetAssignedObject returns the AssignedObject field
func (d *IPAddress) GetAssignedObject() *diodepb.IPAddress_Interface {
	if d != nil && d.AssignedObject != nil {
		return &diodepb.IPAddress_Interface{
			Interface: d.AssignedObject.ConvertToProtoMessage().(*diodepb.Interface),
		}
	}
	return nil
}

// GetStatus returns the Status field
func (d *IPAddress) GetStatus() string {
	if d != nil && d.Status != nil {
		return *d.Status
	}
	return ""
}

// GetRole returns the Role field
func (d *IPAddress) GetRole() string {
	if d != nil && d.Role != nil {
		return *d.Role
	}
	return ""
}

// GetDnsName returns the DnsName field
func (d *IPAddress) GetDnsName() *string {
	if d != nil && d.DnsName != nil {
		return d.DnsName
	}
	return nil
}

// GetDescription returns the Description field
func (d *IPAddress) GetDescription() *string {
	if d != nil && d.Description != nil {
		return d.Description
	}
	return nil
}

// GetComments returns the Comments field
func (d *IPAddress) GetComments() *string {
	if d != nil && d.Comments != nil {
		return d.Comments
	}
	return nil
}

// GetTags returns the Tags field
func (d *IPAddress) GetTags() []*diodepb.Tag {
	var tags []*diodepb.Tag
	for _, el := range d.Tags {
		tags = append(tags, el.ConvertToProtoMessage().(*diodepb.Tag))
	}
	return tags
}

// ConvertToProtoEntityIPAddress converts a IPAddress to a diodepb.Entity
func (d *IPAddress) ConvertToProtoEntity() *diodepb.Entity {
	return &diodepb.Entity{
		Entity: &diodepb.Entity_IpAddress{
			IpAddress: d.ConvertToProtoMessage().(*diodepb.IPAddress),
		},
	}
}

// Interface is based on diodepb.Interface
type Interface struct {
	Device        *Device
	Name          *string
	Label         *string
	Type          *string
	Enabled       *bool
	Mtu           *int32
	MacAddress    *string
	Speed         *int32
	Wwn           *string
	MgmtOnly      *bool
	Description   *string
	MarkConnected *bool
	Mode          *string
	Tags          []*Tag
}

// ConvertToProtoMessageInterface converts a Interface to a diodepb.Interface
func (d *Interface) ConvertToProtoMessage() proto.Message {
	return &diodepb.Interface{
		Device:        d.GetDevice(),
		Name:          d.GetName(),
		Label:         d.GetLabel(),
		Type:          d.GetType(),
		Enabled:       d.GetEnabled(),
		Mtu:           d.GetMtu(),
		MacAddress:    d.GetMacAddress(),
		Speed:         d.GetSpeed(),
		Wwn:           d.GetWwn(),
		MgmtOnly:      d.GetMgmtOnly(),
		Description:   d.GetDescription(),
		MarkConnected: d.GetMarkConnected(),
		Mode:          d.GetMode(),
		Tags:          d.GetTags(),
	}
}

// GetDevice returns the Device field
func (d *Interface) GetDevice() *diodepb.Device {
	if d != nil && d.Device != nil {
		return d.Device.ConvertToProtoMessage().(*diodepb.Device)
	}
	return nil
}

// GetName returns the Name field
func (d *Interface) GetName() string {
	if d != nil && d.Name != nil {
		return *d.Name
	}
	return ""
}

// GetLabel returns the Label field
func (d *Interface) GetLabel() *string {
	if d != nil && d.Label != nil {
		return d.Label
	}
	return nil
}

// GetType returns the Type field
func (d *Interface) GetType() string {
	if d != nil && d.Type != nil {
		return *d.Type
	}
	return ""
}

// GetEnabled returns the Enabled field
func (d *Interface) GetEnabled() *bool {
	if d != nil && d.Enabled != nil {
		return d.Enabled
	}
	return nil
}

// GetMtu returns the Mtu field
func (d *Interface) GetMtu() *int32 {
	if d != nil && d.Mtu != nil {
		return d.Mtu
	}
	return nil
}

// GetMacAddress returns the MacAddress field
func (d *Interface) GetMacAddress() *string {
	if d != nil && d.MacAddress != nil {
		return d.MacAddress
	}
	return nil
}

// GetSpeed returns the Speed field
func (d *Interface) GetSpeed() *int32 {
	if d != nil && d.Speed != nil {
		return d.Speed
	}
	return nil
}

// GetWwn returns the Wwn field
func (d *Interface) GetWwn() *string {
	if d != nil && d.Wwn != nil {
		return d.Wwn
	}
	return nil
}

// GetMgmtOnly returns the MgmtOnly field
func (d *Interface) GetMgmtOnly() *bool {
	if d != nil && d.MgmtOnly != nil {
		return d.MgmtOnly
	}
	return nil
}

// GetDescription returns the Description field
func (d *Interface) GetDescription() *string {
	if d != nil && d.Description != nil {
		return d.Description
	}
	return nil
}

// GetMarkConnected returns the MarkConnected field
func (d *Interface) GetMarkConnected() *bool {
	if d != nil && d.MarkConnected != nil {
		return d.MarkConnected
	}
	return nil
}

// GetMode returns the Mode field
func (d *Interface) GetMode() string {
	if d != nil && d.Mode != nil {
		return *d.Mode
	}
	return ""
}

// GetTags returns the Tags field
func (d *Interface) GetTags() []*diodepb.Tag {
	var tags []*diodepb.Tag
	for _, el := range d.Tags {
		tags = append(tags, el.ConvertToProtoMessage().(*diodepb.Tag))
	}
	return tags
}

// ConvertToProtoEntityInterface converts a Interface to a diodepb.Entity
func (d *Interface) ConvertToProtoEntity() *diodepb.Entity {
	return &diodepb.Entity{
		Entity: &diodepb.Entity_Interface{
			Interface: d.ConvertToProtoMessage().(*diodepb.Interface),
		},
	}
}

// Manufacturer is based on diodepb.Manufacturer
type Manufacturer struct {
	Name        *string
	Slug        *string
	Description *string
	Tags        []*Tag
}

// ConvertToProtoMessageManufacturer converts a Manufacturer to a diodepb.Manufacturer
func (d *Manufacturer) ConvertToProtoMessage() proto.Message {
	return &diodepb.Manufacturer{
		Name:        d.GetName(),
		Slug:        d.GetSlug(),
		Description: d.GetDescription(),
		Tags:        d.GetTags(),
	}
}

// GetName returns the Name field
func (d *Manufacturer) GetName() string {
	if d != nil && d.Name != nil {
		return *d.Name
	}
	return ""
}

// GetSlug returns the Slug field
func (d *Manufacturer) GetSlug() string {
	if d != nil && d.Slug != nil {
		return *d.Slug
	}
	return ""
}

// GetDescription returns the Description field
func (d *Manufacturer) GetDescription() *string {
	if d != nil && d.Description != nil {
		return d.Description
	}
	return nil
}

// GetTags returns the Tags field
func (d *Manufacturer) GetTags() []*diodepb.Tag {
	var tags []*diodepb.Tag
	for _, el := range d.Tags {
		tags = append(tags, el.ConvertToProtoMessage().(*diodepb.Tag))
	}
	return tags
}

// ConvertToProtoEntityManufacturer converts a Manufacturer to a diodepb.Entity
func (d *Manufacturer) ConvertToProtoEntity() *diodepb.Entity {
	return &diodepb.Entity{
		Entity: &diodepb.Entity_Manufacturer{
			Manufacturer: d.ConvertToProtoMessage().(*diodepb.Manufacturer),
		},
	}
}

// Platform is based on diodepb.Platform
type Platform struct {
	Name         *string
	Slug         *string
	Manufacturer *Manufacturer
	Description  *string
	Tags         []*Tag
}

// ConvertToProtoMessagePlatform converts a Platform to a diodepb.Platform
func (d *Platform) ConvertToProtoMessage() proto.Message {
	return &diodepb.Platform{
		Name:         d.GetName(),
		Slug:         d.GetSlug(),
		Manufacturer: d.GetManufacturer(),
		Description:  d.GetDescription(),
		Tags:         d.GetTags(),
	}
}

// GetName returns the Name field
func (d *Platform) GetName() string {
	if d != nil && d.Name != nil {
		return *d.Name
	}
	return ""
}

// GetSlug returns the Slug field
func (d *Platform) GetSlug() string {
	if d != nil && d.Slug != nil {
		return *d.Slug
	}
	return ""
}

// GetManufacturer returns the Manufacturer field
func (d *Platform) GetManufacturer() *diodepb.Manufacturer {
	if d != nil && d.Manufacturer != nil {
		return d.Manufacturer.ConvertToProtoMessage().(*diodepb.Manufacturer)
	}
	return nil
}

// GetDescription returns the Description field
func (d *Platform) GetDescription() *string {
	if d != nil && d.Description != nil {
		return d.Description
	}
	return nil
}

// GetTags returns the Tags field
func (d *Platform) GetTags() []*diodepb.Tag {
	var tags []*diodepb.Tag
	for _, el := range d.Tags {
		tags = append(tags, el.ConvertToProtoMessage().(*diodepb.Tag))
	}
	return tags
}

// ConvertToProtoEntityPlatform converts a Platform to a diodepb.Entity
func (d *Platform) ConvertToProtoEntity() *diodepb.Entity {
	return &diodepb.Entity{
		Entity: &diodepb.Entity_Platform{
			Platform: d.ConvertToProtoMessage().(*diodepb.Platform),
		},
	}
}

// Prefix is based on diodepb.Prefix
type Prefix struct {
	Prefix       *string
	Site         *Site
	Status       *string
	IsPool       *bool
	MarkUtilized *bool
	Description  *string
	Comments     *string
	Tags         []*Tag
}

// ConvertToProtoMessagePrefix converts a Prefix to a diodepb.Prefix
func (d *Prefix) ConvertToProtoMessage() proto.Message {
	return &diodepb.Prefix{
		Prefix:       d.GetPrefix(),
		Site:         d.GetSite(),
		Status:       d.GetStatus(),
		IsPool:       d.GetIsPool(),
		MarkUtilized: d.GetMarkUtilized(),
		Description:  d.GetDescription(),
		Comments:     d.GetComments(),
		Tags:         d.GetTags(),
	}
}

// GetPrefix returns the Prefix field
func (d *Prefix) GetPrefix() string {
	if d != nil && d.Prefix != nil {
		return *d.Prefix
	}
	return ""
}

// GetSite returns the Site field
func (d *Prefix) GetSite() *diodepb.Site {
	if d != nil && d.Site != nil {
		return d.Site.ConvertToProtoMessage().(*diodepb.Site)
	}
	return nil
}

// GetStatus returns the Status field
func (d *Prefix) GetStatus() string {
	if d != nil && d.Status != nil {
		return *d.Status
	}
	return ""
}

// GetIsPool returns the IsPool field
func (d *Prefix) GetIsPool() *bool {
	if d != nil && d.IsPool != nil {
		return d.IsPool
	}
	return nil
}

// GetMarkUtilized returns the MarkUtilized field
func (d *Prefix) GetMarkUtilized() *bool {
	if d != nil && d.MarkUtilized != nil {
		return d.MarkUtilized
	}
	return nil
}

// GetDescription returns the Description field
func (d *Prefix) GetDescription() *string {
	if d != nil && d.Description != nil {
		return d.Description
	}
	return nil
}

// GetComments returns the Comments field
func (d *Prefix) GetComments() *string {
	if d != nil && d.Comments != nil {
		return d.Comments
	}
	return nil
}

// GetTags returns the Tags field
func (d *Prefix) GetTags() []*diodepb.Tag {
	var tags []*diodepb.Tag
	for _, el := range d.Tags {
		tags = append(tags, el.ConvertToProtoMessage().(*diodepb.Tag))
	}
	return tags
}

// ConvertToProtoEntityPrefix converts a Prefix to a diodepb.Entity
func (d *Prefix) ConvertToProtoEntity() *diodepb.Entity {
	return &diodepb.Entity{
		Entity: &diodepb.Entity_Prefix{
			Prefix: d.ConvertToProtoMessage().(*diodepb.Prefix),
		},
	}
}

// Role is based on diodepb.Role
type Role struct {
	Name        *string
	Slug        *string
	Color       *string
	Description *string
	Tags        []*Tag
}

// ConvertToProtoMessageRole converts a Role to a diodepb.Role
func (d *Role) ConvertToProtoMessage() proto.Message {
	return &diodepb.Role{
		Name:        d.GetName(),
		Slug:        d.GetSlug(),
		Color:       d.GetColor(),
		Description: d.GetDescription(),
		Tags:        d.GetTags(),
	}
}

// GetName returns the Name field
func (d *Role) GetName() string {
	if d != nil && d.Name != nil {
		return *d.Name
	}
	return ""
}

// GetSlug returns the Slug field
func (d *Role) GetSlug() string {
	if d != nil && d.Slug != nil {
		return *d.Slug
	}
	return ""
}

// GetColor returns the Color field
func (d *Role) GetColor() string {
	if d != nil && d.Color != nil {
		return *d.Color
	}
	return ""
}

// GetDescription returns the Description field
func (d *Role) GetDescription() *string {
	if d != nil && d.Description != nil {
		return d.Description
	}
	return nil
}

// GetTags returns the Tags field
func (d *Role) GetTags() []*diodepb.Tag {
	var tags []*diodepb.Tag
	for _, el := range d.Tags {
		tags = append(tags, el.ConvertToProtoMessage().(*diodepb.Tag))
	}
	return tags
}

// ConvertToProtoEntityRole converts a Role to a diodepb.Entity
func (d *Role) ConvertToProtoEntity() *diodepb.Entity {
	return &diodepb.Entity{
		Entity: &diodepb.Entity_DeviceRole{
			DeviceRole: d.ConvertToProtoMessage().(*diodepb.Role),
		},
	}
}

// Site is based on diodepb.Site
type Site struct {
	Name        *string
	Slug        *string
	Status      *string
	Facility    *string
	TimeZone    *string
	Description *string
	Comments    *string
	Tags        []*Tag
}

// ConvertToProtoMessageSite converts a Site to a diodepb.Site
func (d *Site) ConvertToProtoMessage() proto.Message {
	return &diodepb.Site{
		Name:        d.GetName(),
		Slug:        d.GetSlug(),
		Status:      d.GetStatus(),
		Facility:    d.GetFacility(),
		TimeZone:    d.GetTimeZone(),
		Description: d.GetDescription(),
		Comments:    d.GetComments(),
		Tags:        d.GetTags(),
	}
}

// GetName returns the Name field
func (d *Site) GetName() string {
	if d != nil && d.Name != nil {
		return *d.Name
	}
	return ""
}

// GetSlug returns the Slug field
func (d *Site) GetSlug() string {
	if d != nil && d.Slug != nil {
		return *d.Slug
	}
	return ""
}

// GetStatus returns the Status field
func (d *Site) GetStatus() string {
	if d != nil && d.Status != nil {
		return *d.Status
	}
	return ""
}

// GetFacility returns the Facility field
func (d *Site) GetFacility() *string {
	if d != nil && d.Facility != nil {
		return d.Facility
	}
	return nil
}

// GetTimeZone returns the TimeZone field
func (d *Site) GetTimeZone() *string {
	if d != nil && d.TimeZone != nil {
		return d.TimeZone
	}
	return nil
}

// GetDescription returns the Description field
func (d *Site) GetDescription() *string {
	if d != nil && d.Description != nil {
		return d.Description
	}
	return nil
}

// GetComments returns the Comments field
func (d *Site) GetComments() *string {
	if d != nil && d.Comments != nil {
		return d.Comments
	}
	return nil
}

// GetTags returns the Tags field
func (d *Site) GetTags() []*diodepb.Tag {
	var tags []*diodepb.Tag
	for _, el := range d.Tags {
		tags = append(tags, el.ConvertToProtoMessage().(*diodepb.Tag))
	}
	return tags
}

// ConvertToProtoEntitySite converts a Site to a diodepb.Entity
func (d *Site) ConvertToProtoEntity() *diodepb.Entity {
	return &diodepb.Entity{
		Entity: &diodepb.Entity_Site{
			Site: d.ConvertToProtoMessage().(*diodepb.Site),
		},
	}
}

// Tag is based on diodepb.Tag
type Tag struct {
	Name  *string
	Slug  *string
	Color *string
}

// ConvertToProtoMessageTag converts a Tag to a diodepb.Tag
func (d *Tag) ConvertToProtoMessage() proto.Message {
	return &diodepb.Tag{
		Name:  d.GetName(),
		Slug:  d.GetSlug(),
		Color: d.GetColor(),
	}
}

// GetName returns the Name field
func (d *Tag) GetName() string {
	if d != nil && d.Name != nil {
		return *d.Name
	}
	return ""
}

// GetSlug returns the Slug field
func (d *Tag) GetSlug() string {
	if d != nil && d.Slug != nil {
		return *d.Slug
	}
	return ""
}

// GetColor returns the Color field
func (d *Tag) GetColor() string {
	if d != nil && d.Color != nil {
		return *d.Color
	}
	return ""
}
