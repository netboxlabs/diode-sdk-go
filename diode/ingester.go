// Code generated by github.com/diode-sdk-go/internal/cmd/codegen. DO NOT EDIT.

package diode

import (
	"google.golang.org/protobuf/proto"

	"github.com/netboxlabs/diode-sdk-go/diode/v1/diodepb"
)

// Entity is an interface that all entities must implement
type Entity interface {
	ConvertToProtoMessage() proto.Message
	ConvertToProtoEntity() *diodepb.Entity
}

// Device is based on diodepb.Device
type Device struct {
	Name        *string
	DeviceFqdn  *string
	DeviceType  *DeviceType
	Role        *Role
	Platform    *Platform
	Serial      *string
	Site        *Site
	AssetTag    *string
	Status      *string
	Description *string
	Comments    *string
	Tags        []*Tag
	PrimaryIp4  *IPAddress
	PrimaryIp6  *IPAddress
}

// ConvertToProtoMessageDevice converts a Device to a diodepb.Device
func (e *Device) ConvertToProtoMessage() proto.Message {
	return &diodepb.Device{
		Name:        e.GetName(),
		DeviceFqdn:  e.GetDeviceFqdn(),
		DeviceType:  e.GetDeviceType(),
		Role:        e.GetRole(),
		Platform:    e.GetPlatform(),
		Serial:      e.GetSerial(),
		Site:        e.GetSite(),
		AssetTag:    e.GetAssetTag(),
		Status:      e.GetStatus(),
		Description: e.GetDescription(),
		Comments:    e.GetComments(),
		Tags:        e.GetTags(),
		PrimaryIp4:  e.GetPrimaryIp4(),
		PrimaryIp6:  e.GetPrimaryIp6(),
	}
}

// GetName returns the Name field
func (e *Device) GetName() string {
	if e != nil && e.Name != nil {
		return *e.Name
	}
	return ""
}

// GetDeviceFqdn returns the DeviceFqdn field
func (e *Device) GetDeviceFqdn() *string {
	if e != nil && e.DeviceFqdn != nil {
		return e.DeviceFqdn
	}
	return nil
}

// GetDeviceType returns the DeviceType field
func (e *Device) GetDeviceType() *diodepb.DeviceType {
	if e != nil && e.DeviceType != nil {
		return e.DeviceType.ConvertToProtoMessage().(*diodepb.DeviceType)
	}
	return nil
}

// GetRole returns the Role field
func (e *Device) GetRole() *diodepb.Role {
	if e != nil && e.Role != nil {
		return e.Role.ConvertToProtoMessage().(*diodepb.Role)
	}
	return nil
}

// GetPlatform returns the Platform field
func (e *Device) GetPlatform() *diodepb.Platform {
	if e != nil && e.Platform != nil {
		return e.Platform.ConvertToProtoMessage().(*diodepb.Platform)
	}
	return nil
}

// GetSerial returns the Serial field
func (e *Device) GetSerial() *string {
	if e != nil && e.Serial != nil {
		return e.Serial
	}
	return nil
}

// GetSite returns the Site field
func (e *Device) GetSite() *diodepb.Site {
	if e != nil && e.Site != nil {
		return e.Site.ConvertToProtoMessage().(*diodepb.Site)
	}
	return nil
}

// GetAssetTag returns the AssetTag field
func (e *Device) GetAssetTag() *string {
	if e != nil && e.AssetTag != nil {
		return e.AssetTag
	}
	return nil
}

// GetStatus returns the Status field
func (e *Device) GetStatus() string {
	if e != nil && e.Status != nil {
		return *e.Status
	}
	return ""
}

// GetDescription returns the Description field
func (e *Device) GetDescription() *string {
	if e != nil && e.Description != nil {
		return e.Description
	}
	return nil
}

// GetComments returns the Comments field
func (e *Device) GetComments() *string {
	if e != nil && e.Comments != nil {
		return e.Comments
	}
	return nil
}

// GetTags returns the Tags field
func (e *Device) GetTags() []*diodepb.Tag {
	var tags []*diodepb.Tag
	for _, el := range e.Tags {
		tags = append(tags, el.ConvertToProtoMessage().(*diodepb.Tag))
	}
	return tags
}

// GetPrimaryIp4 returns the PrimaryIp4 field
func (e *Device) GetPrimaryIp4() *diodepb.IPAddress {
	if e != nil && e.PrimaryIp4 != nil {
		return e.PrimaryIp4.ConvertToProtoMessage().(*diodepb.IPAddress)
	}
	return nil
}

// GetPrimaryIp6 returns the PrimaryIp6 field
func (e *Device) GetPrimaryIp6() *diodepb.IPAddress {
	if e != nil && e.PrimaryIp6 != nil {
		return e.PrimaryIp6.ConvertToProtoMessage().(*diodepb.IPAddress)
	}
	return nil
}

// ConvertToProtoEntityDevice converts a Device to a diodepb.Entity
func (e *Device) ConvertToProtoEntity() *diodepb.Entity {
	return &diodepb.Entity{
		Entity: &diodepb.Entity_Device{
			Device: e.ConvertToProtoMessage().(*diodepb.Device),
		},
	}
}

// DeviceType is based on diodepb.DeviceType
type DeviceType struct {
	Model        *string
	Slug         *string
	Manufacturer *Manufacturer
	Description  *string
	Comments     *string
	PartNumber   *string
	Tags         []*Tag
}

// ConvertToProtoMessageDeviceType converts a DeviceType to a diodepb.DeviceType
func (e *DeviceType) ConvertToProtoMessage() proto.Message {
	return &diodepb.DeviceType{
		Model:        e.GetModel(),
		Slug:         e.GetSlug(),
		Manufacturer: e.GetManufacturer(),
		Description:  e.GetDescription(),
		Comments:     e.GetComments(),
		PartNumber:   e.GetPartNumber(),
		Tags:         e.GetTags(),
	}
}

// GetModel returns the Model field
func (e *DeviceType) GetModel() string {
	if e != nil && e.Model != nil {
		return *e.Model
	}
	return ""
}

// GetSlug returns the Slug field
func (e *DeviceType) GetSlug() string {
	if e != nil && e.Slug != nil {
		return *e.Slug
	}
	return ""
}

// GetManufacturer returns the Manufacturer field
func (e *DeviceType) GetManufacturer() *diodepb.Manufacturer {
	if e != nil && e.Manufacturer != nil {
		return e.Manufacturer.ConvertToProtoMessage().(*diodepb.Manufacturer)
	}
	return nil
}

// GetDescription returns the Description field
func (e *DeviceType) GetDescription() *string {
	if e != nil && e.Description != nil {
		return e.Description
	}
	return nil
}

// GetComments returns the Comments field
func (e *DeviceType) GetComments() *string {
	if e != nil && e.Comments != nil {
		return e.Comments
	}
	return nil
}

// GetPartNumber returns the PartNumber field
func (e *DeviceType) GetPartNumber() *string {
	if e != nil && e.PartNumber != nil {
		return e.PartNumber
	}
	return nil
}

// GetTags returns the Tags field
func (e *DeviceType) GetTags() []*diodepb.Tag {
	var tags []*diodepb.Tag
	for _, el := range e.Tags {
		tags = append(tags, el.ConvertToProtoMessage().(*diodepb.Tag))
	}
	return tags
}

// ConvertToProtoEntityDeviceType converts a DeviceType to a diodepb.Entity
func (e *DeviceType) ConvertToProtoEntity() *diodepb.Entity {
	return &diodepb.Entity{
		Entity: &diodepb.Entity_DeviceType{
			DeviceType: e.ConvertToProtoMessage().(*diodepb.DeviceType),
		},
	}
}

// IPAddress is based on diodepb.IPAddress
type IPAddress struct {
	Address        *string
	AssignedObject *Interface
	Status         *string
	Role           *string
	DnsName        *string
	Description    *string
	Comments       *string
	Tags           []*Tag
}

// ConvertToProtoMessageIPAddress converts a IPAddress to a diodepb.IPAddress
func (e *IPAddress) ConvertToProtoMessage() proto.Message {
	return &diodepb.IPAddress{
		Address:        e.GetAddress(),
		AssignedObject: e.GetAssignedObject(),
		Status:         e.GetStatus(),
		Role:           e.GetRole(),
		DnsName:        e.GetDnsName(),
		Description:    e.GetDescription(),
		Comments:       e.GetComments(),
		Tags:           e.GetTags(),
	}
}

// GetAddress returns the Address field
func (e *IPAddress) GetAddress() string {
	if e != nil && e.Address != nil {
		return *e.Address
	}
	return ""
}

// GetAssignedObject returns the AssignedObject field
func (e *IPAddress) GetAssignedObject() *diodepb.IPAddress_Interface {
	if e != nil && e.AssignedObject != nil {
		return &diodepb.IPAddress_Interface{
			Interface: e.AssignedObject.ConvertToProtoMessage().(*diodepb.Interface),
		}
	}
	return nil
}

// GetStatus returns the Status field
func (e *IPAddress) GetStatus() string {
	if e != nil && e.Status != nil {
		return *e.Status
	}
	return ""
}

// GetRole returns the Role field
func (e *IPAddress) GetRole() string {
	if e != nil && e.Role != nil {
		return *e.Role
	}
	return ""
}

// GetDnsName returns the DnsName field
func (e *IPAddress) GetDnsName() *string {
	if e != nil && e.DnsName != nil {
		return e.DnsName
	}
	return nil
}

// GetDescription returns the Description field
func (e *IPAddress) GetDescription() *string {
	if e != nil && e.Description != nil {
		return e.Description
	}
	return nil
}

// GetComments returns the Comments field
func (e *IPAddress) GetComments() *string {
	if e != nil && e.Comments != nil {
		return e.Comments
	}
	return nil
}

// GetTags returns the Tags field
func (e *IPAddress) GetTags() []*diodepb.Tag {
	var tags []*diodepb.Tag
	for _, el := range e.Tags {
		tags = append(tags, el.ConvertToProtoMessage().(*diodepb.Tag))
	}
	return tags
}

// ConvertToProtoEntityIPAddress converts a IPAddress to a diodepb.Entity
func (e *IPAddress) ConvertToProtoEntity() *diodepb.Entity {
	return &diodepb.Entity{
		Entity: &diodepb.Entity_IpAddress{
			IpAddress: e.ConvertToProtoMessage().(*diodepb.IPAddress),
		},
	}
}

// Interface is based on diodepb.Interface
type Interface struct {
	Device        *Device
	Name          *string
	Label         *string
	Type          *string
	Enabled       *bool
	Mtu           *int32
	MacAddress    *string
	Speed         *int32
	Wwn           *string
	MgmtOnly      *bool
	Description   *string
	MarkConnected *bool
	Mode          *string
	Tags          []*Tag
}

// ConvertToProtoMessageInterface converts a Interface to a diodepb.Interface
func (e *Interface) ConvertToProtoMessage() proto.Message {
	return &diodepb.Interface{
		Device:        e.GetDevice(),
		Name:          e.GetName(),
		Label:         e.GetLabel(),
		Type:          e.GetType(),
		Enabled:       e.GetEnabled(),
		Mtu:           e.GetMtu(),
		MacAddress:    e.GetMacAddress(),
		Speed:         e.GetSpeed(),
		Wwn:           e.GetWwn(),
		MgmtOnly:      e.GetMgmtOnly(),
		Description:   e.GetDescription(),
		MarkConnected: e.GetMarkConnected(),
		Mode:          e.GetMode(),
		Tags:          e.GetTags(),
	}
}

// GetDevice returns the Device field
func (e *Interface) GetDevice() *diodepb.Device {
	if e != nil && e.Device != nil {
		return e.Device.ConvertToProtoMessage().(*diodepb.Device)
	}
	return nil
}

// GetName returns the Name field
func (e *Interface) GetName() string {
	if e != nil && e.Name != nil {
		return *e.Name
	}
	return ""
}

// GetLabel returns the Label field
func (e *Interface) GetLabel() *string {
	if e != nil && e.Label != nil {
		return e.Label
	}
	return nil
}

// GetType returns the Type field
func (e *Interface) GetType() string {
	if e != nil && e.Type != nil {
		return *e.Type
	}
	return ""
}

// GetEnabled returns the Enabled field
func (e *Interface) GetEnabled() *bool {
	if e != nil && e.Enabled != nil {
		return e.Enabled
	}
	return nil
}

// GetMtu returns the Mtu field
func (e *Interface) GetMtu() *int32 {
	if e != nil && e.Mtu != nil {
		return e.Mtu
	}
	return nil
}

// GetMacAddress returns the MacAddress field
func (e *Interface) GetMacAddress() *string {
	if e != nil && e.MacAddress != nil {
		return e.MacAddress
	}
	return nil
}

// GetSpeed returns the Speed field
func (e *Interface) GetSpeed() *int32 {
	if e != nil && e.Speed != nil {
		return e.Speed
	}
	return nil
}

// GetWwn returns the Wwn field
func (e *Interface) GetWwn() *string {
	if e != nil && e.Wwn != nil {
		return e.Wwn
	}
	return nil
}

// GetMgmtOnly returns the MgmtOnly field
func (e *Interface) GetMgmtOnly() *bool {
	if e != nil && e.MgmtOnly != nil {
		return e.MgmtOnly
	}
	return nil
}

// GetDescription returns the Description field
func (e *Interface) GetDescription() *string {
	if e != nil && e.Description != nil {
		return e.Description
	}
	return nil
}

// GetMarkConnected returns the MarkConnected field
func (e *Interface) GetMarkConnected() *bool {
	if e != nil && e.MarkConnected != nil {
		return e.MarkConnected
	}
	return nil
}

// GetMode returns the Mode field
func (e *Interface) GetMode() string {
	if e != nil && e.Mode != nil {
		return *e.Mode
	}
	return ""
}

// GetTags returns the Tags field
func (e *Interface) GetTags() []*diodepb.Tag {
	var tags []*diodepb.Tag
	for _, el := range e.Tags {
		tags = append(tags, el.ConvertToProtoMessage().(*diodepb.Tag))
	}
	return tags
}

// ConvertToProtoEntityInterface converts a Interface to a diodepb.Entity
func (e *Interface) ConvertToProtoEntity() *diodepb.Entity {
	return &diodepb.Entity{
		Entity: &diodepb.Entity_Interface{
			Interface: e.ConvertToProtoMessage().(*diodepb.Interface),
		},
	}
}

// Manufacturer is based on diodepb.Manufacturer
type Manufacturer struct {
	Name        *string
	Slug        *string
	Description *string
	Tags        []*Tag
}

// ConvertToProtoMessageManufacturer converts a Manufacturer to a diodepb.Manufacturer
func (e *Manufacturer) ConvertToProtoMessage() proto.Message {
	return &diodepb.Manufacturer{
		Name:        e.GetName(),
		Slug:        e.GetSlug(),
		Description: e.GetDescription(),
		Tags:        e.GetTags(),
	}
}

// GetName returns the Name field
func (e *Manufacturer) GetName() string {
	if e != nil && e.Name != nil {
		return *e.Name
	}
	return ""
}

// GetSlug returns the Slug field
func (e *Manufacturer) GetSlug() string {
	if e != nil && e.Slug != nil {
		return *e.Slug
	}
	return ""
}

// GetDescription returns the Description field
func (e *Manufacturer) GetDescription() *string {
	if e != nil && e.Description != nil {
		return e.Description
	}
	return nil
}

// GetTags returns the Tags field
func (e *Manufacturer) GetTags() []*diodepb.Tag {
	var tags []*diodepb.Tag
	for _, el := range e.Tags {
		tags = append(tags, el.ConvertToProtoMessage().(*diodepb.Tag))
	}
	return tags
}

// ConvertToProtoEntityManufacturer converts a Manufacturer to a diodepb.Entity
func (e *Manufacturer) ConvertToProtoEntity() *diodepb.Entity {
	return &diodepb.Entity{
		Entity: &diodepb.Entity_Manufacturer{
			Manufacturer: e.ConvertToProtoMessage().(*diodepb.Manufacturer),
		},
	}
}

// Platform is based on diodepb.Platform
type Platform struct {
	Name         *string
	Slug         *string
	Manufacturer *Manufacturer
	Description  *string
	Tags         []*Tag
}

// ConvertToProtoMessagePlatform converts a Platform to a diodepb.Platform
func (e *Platform) ConvertToProtoMessage() proto.Message {
	return &diodepb.Platform{
		Name:         e.GetName(),
		Slug:         e.GetSlug(),
		Manufacturer: e.GetManufacturer(),
		Description:  e.GetDescription(),
		Tags:         e.GetTags(),
	}
}

// GetName returns the Name field
func (e *Platform) GetName() string {
	if e != nil && e.Name != nil {
		return *e.Name
	}
	return ""
}

// GetSlug returns the Slug field
func (e *Platform) GetSlug() string {
	if e != nil && e.Slug != nil {
		return *e.Slug
	}
	return ""
}

// GetManufacturer returns the Manufacturer field
func (e *Platform) GetManufacturer() *diodepb.Manufacturer {
	if e != nil && e.Manufacturer != nil {
		return e.Manufacturer.ConvertToProtoMessage().(*diodepb.Manufacturer)
	}
	return nil
}

// GetDescription returns the Description field
func (e *Platform) GetDescription() *string {
	if e != nil && e.Description != nil {
		return e.Description
	}
	return nil
}

// GetTags returns the Tags field
func (e *Platform) GetTags() []*diodepb.Tag {
	var tags []*diodepb.Tag
	for _, el := range e.Tags {
		tags = append(tags, el.ConvertToProtoMessage().(*diodepb.Tag))
	}
	return tags
}

// ConvertToProtoEntityPlatform converts a Platform to a diodepb.Entity
func (e *Platform) ConvertToProtoEntity() *diodepb.Entity {
	return &diodepb.Entity{
		Entity: &diodepb.Entity_Platform{
			Platform: e.ConvertToProtoMessage().(*diodepb.Platform),
		},
	}
}

// Prefix is based on diodepb.Prefix
type Prefix struct {
	Prefix       *string
	Site         *Site
	Status       *string
	IsPool       *bool
	MarkUtilized *bool
	Description  *string
	Comments     *string
	Tags         []*Tag
}

// ConvertToProtoMessagePrefix converts a Prefix to a diodepb.Prefix
func (e *Prefix) ConvertToProtoMessage() proto.Message {
	return &diodepb.Prefix{
		Prefix:       e.GetPrefix(),
		Site:         e.GetSite(),
		Status:       e.GetStatus(),
		IsPool:       e.GetIsPool(),
		MarkUtilized: e.GetMarkUtilized(),
		Description:  e.GetDescription(),
		Comments:     e.GetComments(),
		Tags:         e.GetTags(),
	}
}

// GetPrefix returns the Prefix field
func (e *Prefix) GetPrefix() string {
	if e != nil && e.Prefix != nil {
		return *e.Prefix
	}
	return ""
}

// GetSite returns the Site field
func (e *Prefix) GetSite() *diodepb.Site {
	if e != nil && e.Site != nil {
		return e.Site.ConvertToProtoMessage().(*diodepb.Site)
	}
	return nil
}

// GetStatus returns the Status field
func (e *Prefix) GetStatus() string {
	if e != nil && e.Status != nil {
		return *e.Status
	}
	return ""
}

// GetIsPool returns the IsPool field
func (e *Prefix) GetIsPool() *bool {
	if e != nil && e.IsPool != nil {
		return e.IsPool
	}
	return nil
}

// GetMarkUtilized returns the MarkUtilized field
func (e *Prefix) GetMarkUtilized() *bool {
	if e != nil && e.MarkUtilized != nil {
		return e.MarkUtilized
	}
	return nil
}

// GetDescription returns the Description field
func (e *Prefix) GetDescription() *string {
	if e != nil && e.Description != nil {
		return e.Description
	}
	return nil
}

// GetComments returns the Comments field
func (e *Prefix) GetComments() *string {
	if e != nil && e.Comments != nil {
		return e.Comments
	}
	return nil
}

// GetTags returns the Tags field
func (e *Prefix) GetTags() []*diodepb.Tag {
	var tags []*diodepb.Tag
	for _, el := range e.Tags {
		tags = append(tags, el.ConvertToProtoMessage().(*diodepb.Tag))
	}
	return tags
}

// ConvertToProtoEntityPrefix converts a Prefix to a diodepb.Entity
func (e *Prefix) ConvertToProtoEntity() *diodepb.Entity {
	return &diodepb.Entity{
		Entity: &diodepb.Entity_Prefix{
			Prefix: e.ConvertToProtoMessage().(*diodepb.Prefix),
		},
	}
}

// Role is based on diodepb.Role
type Role struct {
	Name        *string
	Slug        *string
	Color       *string
	Description *string
	Tags        []*Tag
}

// ConvertToProtoMessageRole converts a Role to a diodepb.Role
func (e *Role) ConvertToProtoMessage() proto.Message {
	return &diodepb.Role{
		Name:        e.GetName(),
		Slug:        e.GetSlug(),
		Color:       e.GetColor(),
		Description: e.GetDescription(),
		Tags:        e.GetTags(),
	}
}

// GetName returns the Name field
func (e *Role) GetName() string {
	if e != nil && e.Name != nil {
		return *e.Name
	}
	return ""
}

// GetSlug returns the Slug field
func (e *Role) GetSlug() string {
	if e != nil && e.Slug != nil {
		return *e.Slug
	}
	return ""
}

// GetColor returns the Color field
func (e *Role) GetColor() string {
	if e != nil && e.Color != nil {
		return *e.Color
	}
	return ""
}

// GetDescription returns the Description field
func (e *Role) GetDescription() *string {
	if e != nil && e.Description != nil {
		return e.Description
	}
	return nil
}

// GetTags returns the Tags field
func (e *Role) GetTags() []*diodepb.Tag {
	var tags []*diodepb.Tag
	for _, el := range e.Tags {
		tags = append(tags, el.ConvertToProtoMessage().(*diodepb.Tag))
	}
	return tags
}

// ConvertToProtoEntityRole converts a Role to a diodepb.Entity
func (e *Role) ConvertToProtoEntity() *diodepb.Entity {
	return &diodepb.Entity{
		Entity: &diodepb.Entity_DeviceRole{
			DeviceRole: e.ConvertToProtoMessage().(*diodepb.Role),
		},
	}
}

// Site is based on diodepb.Site
type Site struct {
	Name        *string
	Slug        *string
	Status      *string
	Facility    *string
	TimeZone    *string
	Description *string
	Comments    *string
	Tags        []*Tag
}

// ConvertToProtoMessageSite converts a Site to a diodepb.Site
func (e *Site) ConvertToProtoMessage() proto.Message {
	return &diodepb.Site{
		Name:        e.GetName(),
		Slug:        e.GetSlug(),
		Status:      e.GetStatus(),
		Facility:    e.GetFacility(),
		TimeZone:    e.GetTimeZone(),
		Description: e.GetDescription(),
		Comments:    e.GetComments(),
		Tags:        e.GetTags(),
	}
}

// GetName returns the Name field
func (e *Site) GetName() string {
	if e != nil && e.Name != nil {
		return *e.Name
	}
	return ""
}

// GetSlug returns the Slug field
func (e *Site) GetSlug() string {
	if e != nil && e.Slug != nil {
		return *e.Slug
	}
	return ""
}

// GetStatus returns the Status field
func (e *Site) GetStatus() string {
	if e != nil && e.Status != nil {
		return *e.Status
	}
	return ""
}

// GetFacility returns the Facility field
func (e *Site) GetFacility() *string {
	if e != nil && e.Facility != nil {
		return e.Facility
	}
	return nil
}

// GetTimeZone returns the TimeZone field
func (e *Site) GetTimeZone() *string {
	if e != nil && e.TimeZone != nil {
		return e.TimeZone
	}
	return nil
}

// GetDescription returns the Description field
func (e *Site) GetDescription() *string {
	if e != nil && e.Description != nil {
		return e.Description
	}
	return nil
}

// GetComments returns the Comments field
func (e *Site) GetComments() *string {
	if e != nil && e.Comments != nil {
		return e.Comments
	}
	return nil
}

// GetTags returns the Tags field
func (e *Site) GetTags() []*diodepb.Tag {
	var tags []*diodepb.Tag
	for _, el := range e.Tags {
		tags = append(tags, el.ConvertToProtoMessage().(*diodepb.Tag))
	}
	return tags
}

// ConvertToProtoEntitySite converts a Site to a diodepb.Entity
func (e *Site) ConvertToProtoEntity() *diodepb.Entity {
	return &diodepb.Entity{
		Entity: &diodepb.Entity_Site{
			Site: e.ConvertToProtoMessage().(*diodepb.Site),
		},
	}
}

// Tag is based on diodepb.Tag
type Tag struct {
	Name  *string
	Slug  *string
	Color *string
}

// ConvertToProtoMessageTag converts a Tag to a diodepb.Tag
func (e *Tag) ConvertToProtoMessage() proto.Message {
	return &diodepb.Tag{
		Name:  e.GetName(),
		Slug:  e.GetSlug(),
		Color: e.GetColor(),
	}
}

// GetName returns the Name field
func (e *Tag) GetName() string {
	if e != nil && e.Name != nil {
		return *e.Name
	}
	return ""
}

// GetSlug returns the Slug field
func (e *Tag) GetSlug() string {
	if e != nil && e.Slug != nil {
		return *e.Slug
	}
	return ""
}

// GetColor returns the Color field
func (e *Tag) GetColor() string {
	if e != nil && e.Color != nil {
		return *e.Color
	}
	return ""
}
